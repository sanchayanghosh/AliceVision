name: Docker CI/CD cycle with Image Maintenance in the Github Registry


on:
  pull_request:
    branches:
      - docker-build-action
    types:
      - opened
      - reopened
      - auto_merge_disabled
      - synchronize
      - edited
    paths-ignore:
      - '**.md'
      - '**.rst'
      - 'docs/**'
  

jobs:
  build-dockerhub-and-push-deps-ubuntu:
    concurrency: docker_build_action
    strategy:
      fail-fast: true
      matrix:
        cudaVersion:
          - 11.7.0
        ubuntuVersion:
          - 20.04
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 6000:5000
    steps:
      -
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            cmake:
              - '**/*[C|c][M|m][A|a][K|k][E|e]*/**'
              - '**/*[C|c][M|m][A|a][K|k][E|e]*'
              - '*[C|c][M|m][A|a][K|k][E|e]*/**'
              - '*[C|c][M|m][A|a][K|k][E|e]*'
              - '**/*docker*/*Dockerfile_ubuntu_deps*'
              - '**/*docker*/*check-cpu.*'
      -
        name: Checkout the git repository
        uses: actions/checkout@v3
      -
        name: Set the envrionment variable
        run: |
          echo AV_VERSION=$(echo $(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)) >> $GITHUB_ENV
      
      - 
        name: Set up Docker Buildx for setting up the Dockerfile
        if: steps.changes.outputs.cmake == 'true'
        uses: docker/setup-buildx-action@v2
      
      -
        name: Login to DockerHub if that is what we want to do.
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      # -
      #   name: Login to Github Container registry and push it there as well
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{github.repository_owner}}
      #     password: ${{secrets.GITHUB_TOKEN}}
      -
        name: Check if the image exists in docker repository
        id: img_check
        continue-on-error: true
        run: |
           docker manifest inspect ${{secrets.DOCKER_USERNAME}}/alicevision:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}
      - 
        name: Pull the latest docker image for the develop branch as developed before
        # if: (steps.changes.outputs.cmake == 'false') && (steps.img_check.outcome == 'success')
        run: |
          docker pull ${{secrets.DOCKER_USERNAME}}/alicevision-deps:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}
          docker tag ${{secrets.DOCKER_USERNAME}}/alicevision-deps:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}} alicevision/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}
          
          
      # - 
      #   name: Actually build and push the docker dependencies container
      #   if: (steps.changes.outputs.cmake == 'true') || (steps.img_check.outcome != 'success')
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     context: .
      #     file: docker/Dockerfile_ubuntu_deps
      #     build-args: |
      #       CUDA_VERSION=${{matrix.cudaVersion}}
      #       UBUNTU_VERSION=${{matrix.ubuntuVersion}}
      #     tags: |
      #       alicevision/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}
      -
        name: Save the docker image
        run: |
          docker save -o /tmp/depImage.tar alicevision/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}

      -
        name: Upload the image as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: depImage
          path: /tmp/depImage.tar

  build-actual-alicevision-container-ubuntu:
    runs-on: ubuntu-latest
    concurrency: docker_build_action
    needs:
      - build-dockerhub-and-push-deps-ubuntu
    services:
      registry:
        image: registry:2
        ports:
          - 6000:5000
    strategy:
      fail-fast: true
      matrix:
        cudaVersion:
          - 11.7.0
        ubuntuVersion:
          - 20.04
    steps:
      -
        name: Checkout the git repository
        uses: actions/checkout@v3
      -
        name: Git Submodule update
        run: |
          git submodule update --init --force
      - 
        name: Set up Docker Buildx for setting up the Dockerfile
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: depImage
          path: /tmp

      -
        name: Set the envrionment variable
        run: |
          echo AV_VERSION=$(echo $(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)) >> $GITHUB_ENV

      -
        name: Load the docker image
        run: |
          docker load --input /tmp/depImage.tar
          # docker tag alicevision/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}} alicevision/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}
          # docker push localhost:6000/alicevision-deps:${AV_VERSION}-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}

      -
        name: Check what our docker image is called
        run : |
          docker image ls

      # -
      #   name: Modify the Dockerfile
      #   run: |
      #     sed -i "s/alicevision\/alicevision\-deps/localhost:6000\/alicevision\/alicevision\-deps/g" docker/Dockerfile_ubuntu
     
      # - 
      #   name: Actually build and push the docker container
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     context: .
      #     file: docker/Dockerfile_ubuntu
      #     build-args: |
      #       CUDA_VERSION=${{matrix.cudaVersion}}
      #       UBUNTU_VERSION=${{matrix.ubuntuVersion}}
      #       AV_VERSION=${{env.AV_VERSION}}
      #     tags: |
      #       alicevision/alicevision:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}

      -
        name: Build the docker container
        run: |
          docker build -t alicevision/alicevision:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}} --build-arg UBUNTU_VERSION=${{matrix.ubuntuVersion}} --build-arg CUDA_VERSION=${{matrix.cudaVersion}} --build-arg AV_VERSION=${AV_VERSION} -f docker/Dockerfile_ubuntu .
        
      -
        name: Save the docker image for the next stage.
        run: |
          docker save -o /tmp/aliceImage.tar alicevision/alicevision:develop-ubuntu${{matrix.ubuntuVersion}}-cuda${{matrix.cudaVersion}}

      -
        name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: aliceImage
          path: /tmp/aliceImage.tar

  unit-test-built-image:
    runs-on: ubuntu-latest
    concurrency: docker_build_action
    needs:
      - build-actual-alicevision-container-ubuntu
    services:
      registry:
        image: registry:2
        ports:
          - 6000:5000
    strategy:
      fail-fast: true
      matrix:
        cudaVersion:
          - 11.7.0
        ubuntuVersion:
          - 20.04

    steps:
      -
        name: Checkout the git repository
        uses: actions/checkout@v3
      -
        name: Git Submodule update
        run: |
          git submodule update --init --force

      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: aliceImage
          path: /tmp

      -
        name: Load the docker image
        run: |
          docker load --input /tmp/aliceImage.tar

      -
        name: Set the environment variable
        run: |
          echo AV_VERSION=$(echo $(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)) >> $GITHUB_ENV
      
      - 
        name: Run unit tests on the image
        run: |
          export AV_VERSION=develop
          export UBUNTU_VERSION=${{matrix.ubuntuVersion}}
          export CUDA_VERSION=${{matrix.cudaVersion}}
          chmod +x docker/test_alicevision_unit_test.sh
          ./docker/test_alicevision_unit_test.sh

  integration-test-built-image:
    runs-on: ubuntu-latest
    concurrency: docker_build_action
    needs:
      - build-actual-alicevision-container-ubuntu
    services:
      registry:
        image: registry:2
        ports:
          - 6000:5000
    strategy:
      fail-fast: true
      matrix:
        cudaVersion:
          - 11.7.0
        ubuntuVersion:
          - 20.04

    steps:
      -
        name: Checkout the git repository
        uses: actions/checkout@v3
      -
        name: Git Submodule update
        run: |
          git submodule update --init --force

      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: aliceImage
          path: /tmp

      -
        name: Load the docker image
        run: |
          docker load --input /tmp/aliceImage.tar
      
      - 
        name: Run integration tests on the image
        run: |
          export AV_VERSION=develop
          export UBUNTU_VERSION=${{matrix.ubuntuVersion}}
          export CUDA_VERSION=${{matrix.cudaVersion}}
          chmod +x docker/test_alicevision_integration_tests.sh
          ./docker/test_alicevision_integration_tests.sh
      

      

      


